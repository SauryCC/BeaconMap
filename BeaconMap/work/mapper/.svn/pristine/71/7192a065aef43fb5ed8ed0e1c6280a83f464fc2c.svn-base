/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   dataStructure.h
 * Author: liuyixu6
 *
 * Created on February 25, 2018, 12:27 AM
 */

#ifndef DATASTRUCTURE_H
#define DATASTRUCTURE_H

#include "StreetsDatabaseAPI.h"
#include "OSMDatabaseAPI.h"
#include <vector>
#include <unordered_map>
#include "graphics_types.h"

#include <boost/geometry.hpp>
#include <boost/geometry/geometries/point.hpp>
#include <boost/geometry/geometries/box.hpp>
#include <boost/geometry/index/rtree.hpp>

namespace bg = boost::geometry;
namespace bgindex = boost::geometry::index;

typedef bg::model::point<double, 3, bg::cs::cartesian> r_point; //point type for spacial query in (x,y,z))
typedef std::pair<r_point, unsigned> r_value; //pair of point and corresponding ID



class dataStructure{
public:
    
    dataStructure();
    virtual ~dataStructure();
    
    void load(); // function to load data structure
    
    void clear(); // function to clear data structure
    
    std::unordered_map<unsigned,std::vector<unsigned> > segments;
    // the unordered map that street is key and the list of its segments as value

    std::unordered_map<unsigned,std::vector<unsigned> > intersections;
    // the unordered map that street is key and the list of its intersections as value

    std::unordered_map <unsigned, std::string> streetToname; 
    // the map has street ids as key and its name as value

    std::unordered_map<std::string,std::vector<unsigned> > nameTostreet; 
    //  the unordered map has name as key and street id as value (might has duplicate id )

    std::unordered_map<unsigned,std::vector<std::string> > interTostreetName;
    // the unordered map that key is intersection id, and value is street names at this intersection

    std::vector<StreetSegmentInfo> streetsegmentinfo;
    // vector for street segment information

    std::vector<std::vector<unsigned> > INTSEG;
    // vector for intersection id -> according street segment

    std::vector<double> street_segment_length; 
    // vector stores length of each segments

    std::vector<double> segments_time;
    // vector stores each street segment travel time
    
    bgindex::rtree< r_value, bgindex::linear<32> > intersection_rtree; 
    //r-tree for intersections
    
    bgindex::rtree< r_value, bgindex::linear<32> > poi_rtree; 
    //r-tree for storing point of interest
    
    // store osmid
    std::unordered_map <OSMID, const OSMNode*> nodes;
    std::unordered_map <OSMID, const OSMWay*> ways;
    
    
    std::vector<LatLon> intersection;

    std::vector<unsigned> ids_of_intersections;
    
    std::vector<std::string> POItype;
    
    // data for thumbnail
    std::vector<std::vector<t_point> > dims_features;
};



#endif /* DATASTRUCTURE_H */

