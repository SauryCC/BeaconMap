/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

#include "m4.h"
#include "m3.h"
#include <chrono>
#include <cstdlib>
#include <iostream>
#include <ctime>
#include "StreetsDatabaseAPI.h"
#include <math.h>
/*

std::vector<unsigned> greeady(const std::vector<DeliveryInfo>& deliveries,
                                        const std::vector<unsigned>& depots,
                                        const float turn_penalty){
    
    unsigned length_depot = depots.size();
    
    unsigned length_delivery = deliveries.size();
    
    std::vector<unsigned> info;
    
    for(unsigned i = 0; i < length_delivery; i++){
        info.push_back(0);
    }
    
    unsigned temp_min = 100000000;
    
    unsigned starting = -1;
    
    unsigned first = -1;
    
    for(unsigned i = 0; i < length_depot; i++){
        unsigned depot = depots[i];
        for(unsigned j = 0; j < length_delivery; j++){
            std::vector<unsigned> temp_path = find_path_between_intersections(depot, 
                                                                              deliveries[j].pickUp,
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                starting = depot;
                first = deliveries[j].pickUp;
                
            }
        }
               
    }
    
    
    std::vector<unsigned> answer = find_path_between_intersections(starting, 
                                                                      first,
                                                                      turn_penalty);
    
    info[first] = 1;
    
    starting = first;
    
    
    for(unsigned i = 0; i < length_delivery*2; i++){
        
        double temp_time_seg = 1000000;
        unsigned next;
        std::vector<unsigned> shorest;
        unsigned index_of_info;
        
         bool if_pushback = false;
        
        
        
        for(unsigned j = 0; j < length_delivery; j++){
            
            std::vector<unsigned> temp_path;
            
            double time;
            
           if_pushback = false;
     
           
            if(info[j] == 0){
                
                temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].pickUp,
                                                            turn_penalty);
                
                
              time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].pickUp;
                    index_of_info = j;
                
                }
              
                if_pushback = true;
                
            }
            else if(info[j] == 1){
                
                temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].dropOff,
                                                            turn_penalty);
                
                time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].dropOff;
                    index_of_info = j;
                
                }
             
                if_pushback = true;
   
            }

        }
         
        
        
        if(if_pushback){
            
            starting = next;//set  the next point to be starting
        
            if(info[index_of_info] == 0){
                info[index_of_info] = 1;
            }
            else if(info[index_of_info] == 1){
                info[index_of_info] = 2;
            }
        
            for(unsigned i = 0; i < shorest.size(); i++){
                answer.push_back(shorest[i]);
            }
     
        }
     
    }
    
    
    temp_min = 1000000;
    unsigned ending_depot;
    std::vector<unsigned> ending_path;
    
    for(unsigned i = 0; i < length_depot; i++){
        //    unsigned depot = depots[i];
       
            std::vector<unsigned> temp_path = find_path_between_intersections(starting, 
                                                                              depots[i],
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                ending_path = temp_path;
                
                
            }
        
               
    }
    
    for(unsigned i = 0; i < ending_path.size(); i++){
        answer.push_back(ending_path[i]);
    }
    
    return answer;
    
    
}

*/
/*
std::vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries,
                                        const std::vector<unsigned>& depots,
                                        const float turn_penalty){
    
   // bool timeout = false;
    
    
    
    unsigned length_depot = depots.size();
    
    unsigned length_delivery = deliveries.size();
    
    std::vector<unsigned> info;
    
    for(unsigned i = 0; i < length_delivery; i++){
        info.push_back(0);
    }
    
    double temp_min = 100000000;
    
    unsigned starting = -1;
    
    unsigned first = -1;
    
    unsigned first_index;
    

        unsigned depot = depots[0];
        
        
        
        for(unsigned j = 0; j < length_delivery; j++){
            std::vector<unsigned> temp_path = find_path_between_intersections(depot, 
                                                                              deliveries[j].pickUp,
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                starting = depot;
                first = deliveries[j].pickUp;
                first_index = j;
                
            }
        }
              
   
    
    
    std::vector<unsigned> answer = find_path_between_intersections(starting, 
                                                                      first,
                                                                      turn_penalty);
    
    info[first_index] = 1;
    
    starting = first;
    
    
    for(unsigned i = 0; i < length_delivery * 2 + 2; i++){
       // auto const startTime = std::chrono::high_resolution_clock::now();
        double temp_time_seg = 10000000;
        unsigned next;
        std::vector<unsigned> shorest;
        unsigned index_of_info;
        
         bool if_pushback = false;
         int count = 0;
        
        
        for(unsigned j = 0; j < length_delivery && count < 5; j++){
            
            std::vector<unsigned> temp_path;
            
            double time;
            
            if_pushback = false;

            if(info[j] == 0){
                
              temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].pickUp,
                                                            turn_penalty);
                
                
              time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].pickUp;
                    index_of_info = j;
                
                }
              
                if_pushback = true;
                
                count++;
                
            }
            else if(info[j] == 1){
                
                temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].dropOff,
                                                            turn_penalty);
                
                time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].dropOff;
                    index_of_info = j;
                
                }
             
                if_pushback = true;
                count++;
   
            }
            
            
            
//         auto const currentTime = std::chrono::high_resolution_clock::now();
//         auto const wallClock = std::chrono::duration_cast<std::chrono::nanoseconds> (currentTime - startTime);
//         if (wallClock.count() > 0.9 * 30 / length_delivery) break;
//            
//            
            
            

        }
         
        
        
        if(if_pushback){
            
            starting = next;//set  the next point to be starting
        
            if(info[index_of_info] == 0){
                info[index_of_info] = 1;
            }
            else if(info[index_of_info] == 1){
                info[index_of_info] = 2;
            }
        
            for(unsigned k = 0; k < shorest.size(); k++){
                answer.push_back(shorest[k]);
            }
     
        }
     
         
         
         
         
         
         
    }
    
    
    temp_min = 1000000;
    unsigned ending_depot;
    std::vector<unsigned> ending_path;
    
    for(unsigned i = 0; i < length_depot; i++){
        //    unsigned depot = depots[i];
       
            std::vector<unsigned> temp_path = find_path_between_intersections(starting, 
                                                                              depots[i],
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                ending_path = temp_path;
                
                
            }
        
               
    }
    
    for(unsigned i = 0; i < ending_path.size(); i++){
        answer.push_back(ending_path[i]);
    }
    
    return answer;
    
    
    
    
    
}

*/

/*
std::vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries,
                                        const std::vector<unsigned>& depots,
                                        const float turn_penalty){
    
    //auto const currentTime = std::chrono::high_resolution_clock::now();
    
    
//         auto const wallClock = std::chrono::duration_cast<std::chrono::nanoseconds> (currentTime - startTime);
//         if (wallClock.count() > 0.9 * 30 / length_delivery) break;
    
    
    
    
    std::srand((int)time(0));
    
    unsigned length_depot = depots.size();
    
    unsigned length_delivery = deliveries.size();
    
    std::vector<unsigned> info;
    
    std::vector<unsigned> reference;
    
    for(unsigned i = 0; i < length_delivery; i++){
        reference.push_back(i);
        info.push_back(0);
    }
    
    
    
    double temp_min = 100000000;
    
    unsigned starting = -1;
    
    unsigned first = -1;
    
    unsigned first_index;
    
    unsigned depot = depots[0];
        
    bool timeout = false;
        
    for(unsigned j = 0; j < length_delivery; j++){
            std::vector<unsigned> temp_path = find_path_between_intersections(depot, 
                                                                              deliveries[j].pickUp,
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                starting = depot;
                first = deliveries[j].pickUp;
                first_index = j;
                
            }
    }
              
        
       
    std::vector<unsigned> answer = find_path_between_intersections(starting, 
                                                                      first,
                                                                      turn_penalty);
    
    info[first_index] = 1;
    
    starting = first;

    
    
    bool if_push = false;
     
     
     while(reference.size() > 0){
         
         unsigned index_of_info;
         
         int r = (rand() % reference.size()); 
         
         // rand()/(100)
         
         
         std::vector<unsigned> temp_path;
         
         unsigned next;

         if_push = false;
         
          if(info[reference[r]] == 0){
                
              temp_path = find_path_between_intersections(starting, 
                                                            deliveries[reference[r]].pickUp,
                                                            turn_penalty);
                
                
//              time = compute_path_travel_time(temp_path, 
//                                     turn_penalty);
              
                if_push = true;
                next = deliveries[reference[r]].pickUp;
                index_of_info = reference[r];
                
            }
            else if(info[reference[r]] == 1){
                
                temp_path = find_path_between_intersections(starting, 
                                                            deliveries[reference[r]].dropOff,
                                                            turn_penalty);
                
//                time = compute_path_travel_time(temp_path, 
//                                     turn_penalty);
            
                if_push = true;
                next = deliveries[reference[r]].dropOff;
                index_of_info = reference[r];
   
            }
         
         
         
         if(if_push){
             starting = next;//set  the next point to be starting
        
            if(info[index_of_info] == 0){
                info[index_of_info] = 1;
            }
            else if(info[index_of_info] == 1){
                info[index_of_info] = 2;
                reference.erase(reference.begin() + index_of_info + 1);
            }
        
            for(unsigned k = 0; k < temp_path.size(); k++){
                answer.push_back(temp_path[k]);
            }
             
         }

     }
    
    
    
    
    temp_min = 1000000;
    unsigned ending_depot;
    std::vector<unsigned> ending_path;
    
    for(unsigned i = 0; i < length_depot; i++){
        //    unsigned depot = depots[i];
       
            std::vector<unsigned> temp_path = find_path_between_intersections(starting, 
                                                                              depots[i],
                                                                              turn_penalty);
            
            double time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
            if(time < temp_min){
                temp_min = time;
                ending_path = temp_path;
                
                
            }
        
               
    }
    
    for(unsigned i = 0; i < ending_path.size(); i++){
        answer.push_back(ending_path[i]);
    }
    
    return answer;
    
    
    while(!timeout){
        
        double temp_time_seg = 10000000;
        unsigned next;
        std::vector<unsigned> shorest;
        unsigned index_of_info;
        
         bool if_pushback = false;
         int count = 0;
        
        
        for(unsigned j = 0; j < length_delivery; j++){
            
            std::vector<unsigned> temp_path;
            
            double time;
            
            
            
         
            if(info[j] == 0){
                
              temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].pickUp,
                                                            turn_penalty);
                
                
              time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].pickUp;
                    index_of_info = j;
                
                }
              
                if_pushback = true;
                
                count++;
                
            }
            else if(info[j] == 1){
                
                temp_path = find_path_between_intersections(starting, 
                                                            deliveries[j].dropOff,
                                                            turn_penalty);
                
                time = compute_path_travel_time(temp_path, 
                                     turn_penalty);
            
                if(time < temp_time_seg){
                    temp_time_seg = time;
                    shorest = temp_path;
                    next = deliveries[j].dropOff;
                    index_of_info = j;
                
                }
             
                if_pushback = true;
                count++;
   
            }
            
            
            
//         auto const currentTime = std::chrono::high_resolution_clock::now();
//         auto const wallClock = std::chrono::duration_cast<std::chrono::nanoseconds> (currentTime - startTime);
//         if (wallClock.count() > 0.9 * 30 / length_delivery) break;
//            
//            
            
            

        }
         
        
        
        if(if_pushback){
            
            starting = next;//set  the next point to be starting
        
            if(info[index_of_info] == 0){
                info[index_of_info] = 1;
            }
            else if(info[index_of_info] == 1){
                info[index_of_info] = 2;
            }
        
            for(unsigned k = 0; k < shorest.size(); k++){
                answer.push_back(shorest[k]);
            }
     
        }
     
         
         
         
         
        
    }
    
    
    

		
    
    
    
}

*/


double length_ptp(unsigned a, unsigned b){
    
    LatLon location1 = getIntersectionPosition(a);
    LatLon location2 = getIntersectionPosition(b);
    
    double length = sqrt(pow(location1.lat() - location2.lat(), 2) + pow(location1.lon() - location2.lon(), 2));
    
    return length;
    
}


std::vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries,
                                        const std::vector<unsigned>& depots,
                                        const float turn_penalty){
    
    
    std::srand((int)time(0));
    
    unsigned length_depot = depots.size();
    
    unsigned length_delivery = deliveries.size();
    
    std::vector<unsigned> info;
    
    std::vector<unsigned> reference;
    
    std::vector<unsigned> unsigned_answer;
    
    for(unsigned i = 0; i < length_delivery; i++){
        reference.push_back(i);
        info.push_back(0);
    }
    
    
    
    double length_min = 100000000;
    
    unsigned starting = -1;
    
    unsigned first = -1;
    
    unsigned first_index;
    
    unsigned depot = depots[0];
        
   
    for(unsigned j = 0; j < length_delivery; j++){
        
        
//            std::vector<unsigned> temp_path = find_path_between_intersections(depot, 
//                                                                              deliveries[j].pickUp,
//                                                                              turn_penalty);
//            
//            double time = compute_path_travel_time(temp_path, 
//                                     turn_penalty);
            
            double length = length_ptp(depot, deliveries[j].pickUp);
            
            
            if(length < length_min){
                length_min = length;
               
                first = deliveries[j].pickUp;
                first_index = j;
                
            }
    }
              
    starting = depot;
    
    unsigned_answer.push_back(depot);
    
    info[first_index] = 1;
    
    starting = first;
    
    unsigned_answer.push_back(first);

    
    
    for(int i = 0; i < length_delivery * 2 + 2 && reference.size() > 0; i++){
        
        
        int r = (rand() % reference.size()); 
        
        
        unsigned index_of_info;
        
        bool if_push = false;
        
        unsigned next;
        
        if(info[reference[r]] == 0){
                
//              temp_path = find_path_between_intersections(starting, 
//                                                            deliveries[reference[r]].pickUp,
//                                                            turn_penalty);
                
                
//              time = compute_path_travel_time(temp_path, 
//                                     turn_penalty);
              
                //double length = length_ptp(depot, deliveries[j].pickUp);
              
             //   if_push = true;
             //   next = deliveries[reference[r]].pickUp;
                index_of_info = reference[r];
                info[index_of_info] = 1;
                next = deliveries[index_of_info].pickUp;
                if_push = true;
                
                
            }
            else if(info[reference[r]] == 1){
                
//                temp_path = find_path_between_intersections(starting, 
//                                                            deliveries[reference[r]].dropOff,
//                                                            turn_penalty);
                
//                time = compute_path_travel_time(temp_path, 
//                                     turn_penalty);
            
             //   if_push = true;
              //  next = deliveries[reference[r]].dropOff;
                index_of_info = reference[r];
                info[index_of_info] = 2;
                reference.erase(reference.begin() + r);
                next = deliveries[index_of_info].dropOff;

                if_push = true;   
            }
         
        
        if(if_push){
            
            starting = next;//set  the next point to be starting
            unsigned_answer.push_back(next);
        }
        
      

        
    }
    
    
     length_min = 100000000;

     unsigned ending;
    
     for(unsigned i = 0; i < length_depot; i++){
        //    unsigned depot = depots[i];
       
            double length = length_ptp(depots[i], starting);
         
            if(length < length_min){
                length_min = length;
  
                ending = depots[i];
                
                
            }
        
               
    }
        
        
    std::vector<unsigned> final_answer;
    
    
    unsigned_answer.push_back(ending);
    
    
    
    for(unsigned  i = 0 ; i < unsigned_answer.size() - 1; i++ ){
        
        std::vector<unsigned> temp_path = find_path_between_intersections(unsigned_answer[i], 
                                                            unsigned_answer[i+1],
                                                            turn_penalty);
        
        for(unsigned j = 0; j < temp_path.size(); j++){
            final_answer.push_back(temp_path[j]);
        }
    }
    
    
    return final_answer;
    
    
}