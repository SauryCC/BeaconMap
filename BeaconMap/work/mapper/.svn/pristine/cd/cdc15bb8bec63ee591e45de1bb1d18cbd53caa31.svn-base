/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include <iostream>
#include <chrono>
#include <thread>
#include <cstdlib>
#include <vector>
#include <string>
#include <math.h>
#include "m2.h"
#include "m1.h"
#include "graphics.h"
#include "StreetsDatabaseAPI.h"


double lat_max = 0;

double lat_min = 0;

double lat_avg = 0;

double lon_max = 0;

double lon_min = 0;


//class feature_information{
//public:
//    unsigned ID;
//    std::vector<LatLon> address;
//    
//    feature_information(unsigned & id){
//        ID = id;
//    }
//    
//    
//};
//
//
//std::vector<std::vector<feature_information>> features;

void drawscreen(void);
void act_on_new_button_func(void (*drawscreen_ptr) (void));
void act_on_button_press(float x, float y, t_event_buttonPressed event);
void act_on_mouse_move(float x, float y);
void act_on_key_press(char c, int keysym);
void delay(long milliseconds);

int street_seg_linewidth(float speedlimit);

struct intersection_data{
    LatLon position;
    std::string name;
};

std::vector<intersection_data> intersec;
double avg_lat;

void draw_map(){
    
        double max_lat = getIntersectionPosition(0).lat();
    double min_lat = max_lat;
    double max_lon = getIntersectionPosition(0).lon();
    double min_lon = max_lon;
    
      intersec.resize(getNumberOfIntersections());
    for(unsigned id=0; id<getNumberOfIntersections(); id++){
        intersec[id].position = getIntersectionPosition(id);
        intersec[id].name = getIntersectionName(id);
        max_lat = std::max(max_lat, intersec[id].position.lat());
        min_lat = std::min(min_lat, intersec[id].position.lat());
        
        max_lon = std::max(max_lon, intersec[id].position.lon());
        min_lon = std::min(min_lon, intersec[id].position.lon());
    }
    avg_lat = 0.5*(max_lat + min_lat);
    
    // Set the name of the window (in UTF-8), with white background.

    // We'll first do double buffered drawing, where we draw to an off-screen
    // buffer and then quickly copy it to the screen to avoid flashes as we 
    // rapidly change the graphics when panning or zooming

    // Set-up coordinates. The coordinates passed in define what coordinate
    // limits you want to use; this coordinate system is mapped to fill 
    // the screen.
  
    for(unsigned a = 0; a < getNumberOfIntersections(); a ++){
        double temp_lat = getIntersectionPosition(a).lat();
        double temp_lon = getIntersectionPosition(a).lon();
         if(a==0){
             lat_max = temp_lat;
             lat_min = temp_lat;
             lon_max = temp_lon;
             lon_min = temp_lon;
         }
         if(lat_max < temp_lat) lat_max = temp_lat;
         if(lon_max < temp_lon) lon_max = temp_lon;
         if(lat_min > temp_lat) lat_min = temp_lat;
         if(lon_min > temp_lon) lon_min = temp_lon;
        
    }
    
    
    
    
    init_graphics("Some Example Graphics", t_color(240,240,240,255));
    set_visible_world (lon_min * cos((lat_max + lat_min)/2) * DEG_TO_RAD,lat_min * 
    DEG_TO_RAD,lon_max * cos((lat_max + lat_min)/2) * DEG_TO_RAD,lat_max * DEG_TO_RAD);
    update_message("Interactive graphics example.");
    set_drawing_buffer(OFF_SCREEN);
    clearscreen(); /* Should precede drawing for all drawscreens */
    event_loop(NULL,NULL,NULL, drawscreen);
    close_graphics();
}


void drawscreen(void) {

    /* The redrawing routine for still pictures.  The graphics package calls  
     * this routine to do redrawing after the user changes the window 
     * in any way.                                                    
     */

    set_draw_mode(DRAW_NORMAL); // Should set this if your program does any XOR drawing in callbacks.
    clearscreen(); /* Should precede drawing for all drawscreens */

    
    setlinestyle(SOLID);
    setlinewidth(1);
    setcolor(WHITE);
    
    for(unsigned i=0; i<getNumberOfStreetSegments(); i++){
        LatLon point1 = getIntersectionPosition(getStreetSegmentInfo(i).from);
        LatLon point2 = getIntersectionPosition(getStreetSegmentInfo(i).to);
        float speed = getStreetSegmentInfo(i).speedLimit;
        setlinewidth(street_seg_linewidth(speed));
        
        // x = lon * cos(lat_avg)
        double x1 = point1.lon() * cos(avg_lat) * DEG_TO_RAD;
        double x2 = point2.lon() * cos(avg_lat) * DEG_TO_RAD;
        // y = lat
        double y1 = point1.lat() * DEG_TO_RAD;
        double y2 = point2.lat() * DEG_TO_RAD;
        
        if(getStreetSegmentInfo(i).curvePointCount == 0){
            drawline(x1, y1, x2, y2);
        }
        else{
            LatLon temp_point1 = getStreetSegmentCurvePoint(i, 0); // first curve point
            LatLon temp_point2 = getStreetSegmentCurvePoint(i, getStreetSegmentInfo(i).curvePointCount-1); // last curve point
            // first draw first and last curve 
            double temp_x1 = temp_point1.lon() * cos(avg_lat) * DEG_TO_RAD;
            double temp_x2 = temp_point2.lon() * cos(avg_lat) * DEG_TO_RAD;
            
            double temp_y1 = temp_point1.lat() * DEG_TO_RAD;
            double temp_y2 = temp_point2.lat() * DEG_TO_RAD;
            
            drawline(x1, y1, temp_x1, temp_y1);
            drawline(temp_x2, temp_y2, x2, y2);
            
            // then loop street segment, find curve length between two curve points
            for(unsigned a=0; a<getStreetSegmentInfo(i).curvePointCount-1; a++){
                temp_point1 = getStreetSegmentCurvePoint(i, a); // first curve point
                temp_point2 = getStreetSegmentCurvePoint(i, a+1); // second curve point
                
                temp_x1 = temp_point1.lon() * cos(avg_lat) * DEG_TO_RAD;
                temp_x2 = temp_point2.lon() * cos(avg_lat) * DEG_TO_RAD;

                temp_y1 = temp_point1.lat() * DEG_TO_RAD;
                temp_y2 = temp_point2.lat() * DEG_TO_RAD;
                
                drawline(temp_x1, temp_y1, temp_x2, temp_y2);
            }
            
        }
        
    }
        /**************
         * Draw some rectangles using the indexed colours
         **************/

        color_types color_indicies[] = {
            LIGHTGREY,
            DARKGREY,
            WHITE,
            BLACK,
            BLUE,
            GREEN,
            YELLOW,
            CYAN,
            RED,
            DARKGREEN,
            MAGENTA
        };

        
        unsigned num_of_features = getNumberOfFeatures();


        for(unsigned i = 0; i < num_of_features; i++){
            
            FeatureType temp_feature = getFeatureType(i);
            unsigned num_of_points = getFeaturePointCount(i);
            t_point list_of_points[num_of_points];
            
            for(unsigned a = 0; a < num_of_points; a++){

                list_of_points[a].x = getFeaturePoint(i, a).lon() * cos((lat_max + lat_min)/2) * DEG_TO_RAD;
                list_of_points[a].y = getFeaturePoint(i, a).lat() * DEG_TO_RAD;
            }
            
            if(temp_feature == 1){//Park
                
                setcolor( 175,  255,  130, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 2){//Beach
                setcolor( 240,  240,  150, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 3){//Lake
                setcolor( 50,  250,  250, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 4){//River
                
                setcolor( 50,  250,  250, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 5){//Island
                setcolor(250,250,245,255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 6){//Shoreline, deprecated, no longer used & should be removed
                
            }
            else if(temp_feature == 7){//Building
                setcolor(255,  237,  188, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 8){//Greenspace
                setcolor( 191,  255,  170, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 9){//Golfcourse
                setcolor( 127,  223,  30, 255);
                fillpoly(list_of_points, num_of_points);
                
            }
            else if(temp_feature == 10){//Stream
                setlinewidth(0.3);
                setcolor( 50,  250,  250, 255);
                for(unsigned ref = 0; ref < num_of_points - 1; ref++){
                    drawline(list_of_points[ref], list_of_points[ref+1]);
                }           
            }
            else if(temp_feature == 0){//Unknown
                setcolor(color_indicies[1]);
                fillpoly(list_of_points, num_of_points);
            }
            
         }
        
  copy_off_screen_buffer_to_screen();
  
}




int street_seg_linewidth(float speedlimit){
    if(speedlimit >= 100){
        return 8;
    }
    else if(speedlimit >= 80){
        return 7;
    }
    else if(speedlimit >= 50){
        return 6;
    }
    else if(speedlimit >= 30){
        return 5;
    }
    else{
        return 4;
    }
}