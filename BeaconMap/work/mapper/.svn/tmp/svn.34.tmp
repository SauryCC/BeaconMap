/* 
 * Copyright 2018 University of Toronto
 *
 * Permission is hereby granted, to use this software and associated 
 * documentation files (the "Software") in course work at the University 
 * of Toronto, or for personal use. Other uses are prohibited, in 
 * particular the distribution of the Software either publicly or to third 
 * parties.
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "m1_header.h"

std::unordered_map <unsigned, std::vector<unsigned>> segments;
// the unordered map that street is key and the list of its segements as value

std::unordered_map <unsigned, std::vector<unsigned>> intersections;
// the unordered map that street is key and the list of its inersections as value

std::unordered_map <unsigned, std::string> streetToname; 
// the map has street ids as key and its name as value

std::unordered_map <std::string, std::vector<unsigned>> nameTostreet; 
//  the unordered map has name as key and street id as value (might has duplicate id )

std::unordered_map <std::string, std::vector<unsigned>> nameToPOI; 

std::unordered_map<unsigned,std::vector<std::string>> interTostreetName;

std::vector<StreetSegmentInfo> streetsegmentinfo;

std::vector<std::vector<unsigned>> INTSEG;

std::vector<double> street_segment_length; 
// vector stores each segments'length

std::vector<double> segments_time;
// vector stores each street segment travel time

std::vector<LatLon> poi;
//vector stores LatLon of every point of interest

std::vector<LatLon> intersection;
//vector stores LatLon of every intersection


//Returns the distance between two coordinates in meters
double find_distance_between_two_points(LatLon point1, LatLon point2){
    // change degree to radian
    double lat_avg = DEG_TO_RAD * (point1.lat() + point2.lat())/2;
    // x = lon * cos(lat_avg)
    double x1 = DEG_TO_RAD * point1.lon() * cos(lat_avg);
    double x2 = DEG_TO_RAD * point2.lon() * cos(lat_avg);
    // y = lat
    double y1 = DEG_TO_RAD * point1.lat();
    double y2 = DEG_TO_RAD * point2.lat();
    // d = R * sqrt((y1-y2)^2 + (x1-x2)^2)
    return EARTH_RADIUS_IN_METERS * sqrt((y2-y1)*(y2-y1) + (x2-x1)*(x2-x1));
}

bool load_map(std::string map_name/*map_path*/) {
    bool load_successful = false; //Indicates whether the map has loaded 
                                  //successfully
    bool load_osm_successful = false;
    
    std::string map_path = "/cad2/ece297s/public/maps/toronto_canada.osm.bin";
    
    load_successful = loadStreetsDatabaseBIN(map_name);

    load_osm_successful = loadOSMDatabaseBIN(map_path);

    
    if (!load_successful) return false; // if load fail directly return false avoid the rest of the program processing
    if(!load_osm_successful) return false;
    
    //store_osm_data_structure();
    
    //Load map related data structures
    //StreetSegmentInfo tempstreetInfo;
    unsigned numSeg = getNumberOfStreetSegments();  
    unsigned numStreet =  getNumberOfStreets();
    unsigned numofIntersections =getNumberOfIntersections();
    std::string test;
    
    
    //LatLon from;
    //LatLon to;
    
    double length =0.0;
    INTSEG.assign(numofIntersections,std::vector<unsigned> ());
    
    
    for (unsigned i =0; i<numSeg; i++){
        // store all the segments info in order
        streetsegmentinfo.push_back(getStreetSegmentInfo(i));  
    }
    
    for (unsigned i =0; i<numStreet;i++){
        test = getStreetName(i); // the name for the street
        
        streetToname.insert(std::pair<unsigned,std::string> (i,test));  // push the name into the map with streetID as key
        std::unordered_map<std::string,std::vector<unsigned>> ::iterator it = nameTostreet.find(test);  //  find there exist a key that called test
        
        // if not, creating a new key and its value 
        if ( it == nameTostreet.end()){
            nameTostreet.insert(std::pair<std::string,std::vector<unsigned>> (test,std::vector<unsigned>()));
            nameTostreet[test].push_back(i);
        } 
        else  nameTostreet[test].push_back(i);// if the key is already existed, push back the another value
        
        //create all the keys for a map but leave the value empty
        intersections.insert(std::pair<unsigned,std::vector<unsigned>>(i,std::vector<unsigned> ()));
        segments.insert(std::pair<unsigned,std::vector<unsigned>>(i,std::vector<unsigned> ()));
        
    }


    
    //create all the keys for a map but leave the value empty
    for (unsigned i = 0 ; i< numofIntersections;i++){
         interTostreetName.insert(std::pair<unsigned,std::vector<std::string>>(i,std::vector<std::string> ()));
         

    }
    

   
    for (unsigned i = 0; i<numSeg; i++){
        // store all the from and to into the variables: intersections and sort it later 
         intersections[streetsegmentinfo[i].streetID].push_back(streetsegmentinfo[i].from);
         intersections[streetsegmentinfo[i].streetID].push_back(streetsegmentinfo[i].to);
         segments[ streetsegmentinfo[i].streetID].push_back(i);
         
         // calculating the length and store it into the variable: street_segment_length
         if (streetsegmentinfo[i].curvePointCount == 0){
             length = find_distance_between_two_points(getIntersectionPosition(streetsegmentinfo[i].from),getIntersectionPosition(streetsegmentinfo[i].to));
             street_segment_length.push_back(length);
             segments_time.push_back(length/(0.277778 * streetsegmentinfo[i].speedLimit));
         }
         else {
            LatLon temp_point1 = getStreetSegmentCurvePoint(i, 0); // first curve point
            LatLon temp_point2 = getStreetSegmentCurvePoint(i, streetsegmentinfo[i].curvePointCount-1); // last curve point
            // first calculate the sum of first and last curve 
            length = length + find_distance_between_two_points(temp_point1, getIntersectionPosition(streetsegmentinfo[i].from))+ find_distance_between_two_points(getIntersectionPosition(streetsegmentinfo[i].to), temp_point2); // last curve segment length
            // then loop street segment, find curve length between two curve points
            for(unsigned a=0; a<streetsegmentinfo[i].curvePointCount-1; a++){
                temp_point1 = getStreetSegmentCurvePoint(i, a); // first curve point
                temp_point2 = getStreetSegmentCurvePoint(i, a+1); // second curve point
                length += find_distance_between_two_points(temp_point1, temp_point2);
            }
            // store street length in vector
            street_segment_length.push_back(length);
            // store street segment travel time in vector
            segments_time.push_back(length/(0.277778 * streetsegmentinfo[i].speedLimit));
        
       }
        length = 0.0;  // clear the length ;
    }
    

    
    for (unsigned i = 0; i<numSeg; i++){
        // store all the segment id in 2d vector of intersection to street segment
        INTSEG[streetsegmentinfo[i].from].push_back(i); 
        INTSEG[streetsegmentinfo[i].to].push_back(i);       
    }
    
    for (unsigned i = 0; i<numSeg; i++){
        // store street id in 2d vector of intersection_to_streetName
         interTostreetName[streetsegmentinfo[i].from].push_back(getStreetName(getStreetSegmentInfo(i).streetID));
         interTostreetName[streetsegmentinfo[i].to].push_back(getStreetName(getStreetSegmentInfo(i).streetID));
    } 
    
    
    
    for(std::unordered_map<unsigned,std::vector<unsigned>>::iterator iter =intersections.begin(); iter != intersections.end(); iter++){
        // eliminating all the duplicate elements in the map
        std::sort( iter->second.begin(), iter->second.end() );
        iter->second.erase(std::unique( iter->second.begin(), iter->second.end() ), iter->second.end() ); 
    }
    
    

    for(unsigned a = 0; a < getNumberOfIntersections(); a ++){
        intersection.push_back(getIntersectionPosition(a));
        
        
        
    }
    
    for(unsigned a = 0; a < getNumberOfPointsOfInterest(); a++ ){

        poi.push_back(getPointOfInterestPosition(a));
        
        
        test = getPointOfInterestName(a); // the name for the street
         
        std::unordered_map<std::string,std::vector<unsigned>> ::iterator it = nameToPOI.find(test);  //  find there exist a key that called test
        
        // if not, creating a new key and its value 
        if ( it == nameToPOI.end()){
            nameToPOI.insert(std::pair<std::string,std::vector<unsigned>> (test,std::vector<unsigned>()));
            nameToPOI[test].push_back(a);
        } 
        else  nameToPOI[test].push_back(a);
 

    }
 
    return true;
}

void close_map() {
    closeOSMDatabase();
    
    closeStreetDatabase(); 
    //Clean-up your map related data structures here
    for(std::unordered_map<unsigned,std::vector<unsigned>>::iterator iter =segments.begin(); iter != segments.end(); ++iter){
        iter->second.clear();
    }
    for(std::unordered_map<unsigned,std::vector<unsigned>>::iterator iter =intersections.begin(); iter != intersections.end(); ++iter){
        iter->second.clear();
    }
    for(std::unordered_map<std::string,std::vector<unsigned>>::iterator iter =nameTostreet.begin(); iter != nameTostreet.end(); ++iter){
        iter->second.clear();
    }
    for(std::unordered_map<unsigned,std::string>::iterator iter =streetToname.begin(); iter != streetToname.end(); ++iter){
        iter->second.clear();
    }
    for (std::unordered_map<unsigned,std::vector<std::string>>::iterator iter =interTostreetName.begin(); iter != interTostreetName.end(); ++iter){
        iter->second.clear();
    }
    for(unsigned i = 0; i<INTSEG.size();i++){
        INTSEG[i].clear();
    }
   
    
    
    segments.clear();
    intersections.clear();
    nameTostreet.clear();
    streetToname.clear();
    interTostreetName.clear();
    streetsegmentinfo.clear();
    INTSEG.clear();
    street_segment_length.clear();
    segments_time.clear();

}

std::vector<unsigned> find_street_ids_from_name(std::string street_name){
    return nameTostreet [street_name];
    //return nameTostreet["Yonge Street"];
}

std::vector<unsigned> find_intersection_street_segments(unsigned intersection_id){  
    return INTSEG [intersection_id];
}

std::vector<std::string> find_intersection_street_names(unsigned intersection_id){
    return interTostreetName[intersection_id];
}


bool are_directly_connected(unsigned intersection_id1, unsigned intersection_id2){
    std::vector<unsigned> seg_int1 = INTSEG[intersection_id1];

    StreetSegmentInfo seginfo_int1;
    
    for(unsigned i = 0; i < seg_int1.size(); i++){
         seginfo_int1 = streetsegmentinfo[seg_int1[i]];
         if(((seginfo_int1.from == intersection_id1 )&& (seginfo_int1.to == intersection_id2)) || ((seginfo_int1.from == intersection_id2 )&& (!seginfo_int1.oneWay )&& (seginfo_int1.to == intersection_id1))){
             return true;
         } 
    } 
    if (intersection_id1 ==intersection_id2) return true; 
    return false;
}



std::vector<unsigned> find_adjacent_intersections(unsigned intersection_id){
    unsigned int NumSeg = getIntersectionStreetSegmentCount(intersection_id); // get the number of total streetSegments
    std::vector<unsigned> v; 
    StreetSegmentIndex in;
    
    for (unsigned i =0; i < NumSeg; i++){
        in = getIntersectionStreetSegment(intersection_id, i);
        if (streetsegmentinfo[in].from == intersection_id) {
            if (streetsegmentinfo[in].to != intersection_id) {
               v.push_back(streetsegmentinfo[in].to);
                
            }      
        }
        else if (streetsegmentinfo[in].to == intersection_id && !streetsegmentinfo[in].oneWay){
                            v.push_back(streetsegmentinfo[in].from);
        }
        std::sort(v.begin(),v.end());
        v.erase(std::unique(v.begin(),v.end()),v.end());
    }
    return v;
    
}
std::vector<unsigned> find_street_street_segments(unsigned street_id){
    return segments[street_id];
}

std::vector<unsigned> find_all_street_intersections(unsigned street_id){
    return intersections[street_id];
}


std::vector<unsigned> find_intersection_ids_from_street_names(std::string street_name1, 
                                                              std::string street_name2){
 
    std::vector<unsigned> common; 
    std::vector<unsigned> vstreet1,vstreet2; 
    std::vector <unsigned> vinter1,vinter2;
    
    vstreet1 = nameTostreet[street_name1];                                                                   
    vstreet2 = nameTostreet[street_name2];
    
    for (unsigned i =0; i<vstreet1.size(); i++){
         vinter1 = intersections[vstreet1[i]]; // the intersections for the first street
        for (unsigned j = 0; j<vstreet2.size();j++){
            vinter2 =  intersections[vstreet2[j]];// the intersections for the second street 
            std::set_intersection(vinter1.begin(),vinter1.end(),vinter2.begin(),vinter2.end(),std::back_inserter(common));  // find the common intersections between 2 streets
        }
    }
    return common;

}





//Returns the length of the given street segment in meters
double find_street_segment_length(unsigned street_segment_id){
     return street_segment_length[street_segment_id];
    
}

//Returns the length of the specified street in meters
double find_street_length(unsigned street_id){
    double street_length = 0.0;

    for(unsigned i=0; i < segments[street_id].size(); i++){   
            street_length +=  street_segment_length[segments[street_id][i]];  
    }
    return street_length;
 
}

//Returns the travel time to drive a street segment in seconds 
//(time = distance/speed_limit)
double find_street_segment_travel_time(unsigned street_segment_id){
    return segments_time[street_segment_id];
}

unsigned find_closest_point_of_interest(LatLon my_position){

    double ref = 10000000;
    double dist = 0;
    unsigned closest = 0;
    
    
    double mypoi_y = my_position.lat() * DEG_TO_RAD;
    double averagelat = cos(mypoi_y);
    double mypoi_x = my_position.lon() * DEG_TO_RAD * averagelat;
    
    double closest_x, closest_y;
    
    unsigned size =  getNumberOfPointsOfInterest();

    /*things above preset values that are needed in the following comparison*/
    
    
    for(unsigned i = 0 ; i < size; i ++){
        
        closest_x = (poi[i]).lon() * averagelat * DEG_TO_RAD;
        closest_y = poi[i].lat() * DEG_TO_RAD;
        
        dist = pow(mypoi_y - closest_y, 2) + pow(closest_x - mypoi_x,2);
        
        if(ref > dist){
              closest = i;
              ref = dist;
        }
        
    }


    return closest;

}

unsigned find_closest_intersection(LatLon my_position){

    double ref = 10000000;
    double dist = 0;
    unsigned cl = 0;
    
    
    double mypoi_y = my_position.lat() * DEG_TO_RAD;
    double averagelat = cos(mypoi_y);
    double mypoi_x = my_position.lon() * DEG_TO_RAD * averagelat;
    
    double closest_x, closest_y;
    
    unsigned size = getNumberOfIntersections();
    
    
        /*things above preset values that are needed in the following comparison*/

    
    for(unsigned i = 0 ; i < size; i ++){
        
        closest_x = (intersection[i]).lon() * averagelat * DEG_TO_RAD;
        closest_y = (intersection[i]).lat() * DEG_TO_RAD;
        
        dist = pow(mypoi_y - closest_y, 2) + pow(closest_x - mypoi_x,2);
        
        if(ref > dist){
              cl = i;
              ref = dist;
        }
        
    }

    return cl;
}
