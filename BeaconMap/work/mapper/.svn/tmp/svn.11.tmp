/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include <iostream>
#include <chrono>
#include <thread>
#include <cstdlib>
#include <vector>
#include <string>
#include <math.h>
#include "m2.h"
#include "m1.h"
#include "graphics.h"
#include "StreetsDatabaseAPI.h"


double lat_max = 0;

double lat_min = 0;

double lat_avg = 0;

double lon_max = 0;

double lon_min = 0;


class feature_information{
public:
    unsigned ID;
    std::vector<LatLon> address;
    
    feature_information(unsigned & id){
        ID = id;
    }
    
    
};


std::vector<std::vector<feature_information>> features;

void drawscreen(void);
void act_on_new_button_func(void (*drawscreen_ptr) (void));
void act_on_button_press(float x, float y, t_event_buttonPressed event);
void act_on_mouse_move(float x, float y);
void act_on_key_press(char c, int keysym);
void delay(long milliseconds);


static bool line_entering_demo = false;
static bool have_rubber_line = false;
static t_point rubber_pt; // Last point to which we rubber-banded.
static std::vector<t_point> line_pts; // Stores the points entered by user clicks
static int num_new_button_clicks = 0;

void draw_map(){
    
    for(unsigned a = 0; a < getNumberOfIntersections(); a ++){
        double temp_lat = getIntersectionPosition(a).lat();
        double temp_lon = getIntersectionPosition(a).lon();
         if(a==0){
             lat_max = temp_lat;
             lat_min = temp_lat;
             lon_max = temp_lon;
             lon_min = temp_lon;
         }
         if(lat_max < temp_lat) lat_max = temp_lat;
         if(lon_max < temp_lon) lon_max = temp_lon;
         if(lat_min > temp_lat) lat_min = temp_lat;
         if(lon_min > temp_lon) lon_min = temp_lon;
        
    }
    
    
    
    
 init_graphics("Some Example Graphics", t_color(250,250,245,255));
 set_visible_world (lon_min * cos((lat_max + lat_min)/2) * DEG_TO_RAD,lat_min * DEG_TO_RAD,lon_max * cos((lat_max + lat_min)/2) * DEG_TO_RAD,lat_max * DEG_TO_RAD);
 update_message("Interactive graphics example.");
 set_drawing_buffer(OFF_SCREEN);
clearscreen(); /* Should precede drawing for all drawscreens */
event_loop(NULL,NULL,NULL, drawscreen);
// setfontsize (10);
// setcolor (BLACK);
//
//drawtext (110, 55, "colors", 150) ;
close_graphics();
}


void drawscreen(void) {

    /* The redrawing routine for still pictures.  The graphics package calls  
     * this routine to do redrawing after the user changes the window 
     * in any way.                                                    
     */

    set_draw_mode(DRAW_NORMAL); // Should set this if your program does any XOR drawing in callbacks.
    clearscreen(); /* Should precede drawing for all drawscreens */

    setfontsize(10);
    setlinestyle(SOLID);
    setlinewidth(1);
    setcolor(BLACK);

    
        /**************
         * Draw some rectangles using the indexed colours
         **************/

        color_types color_indicies[] = {
            LIGHTGREY,
            DARKGREY,
            WHITE,
            BLACK,
            BLUE,
            GREEN,
            YELLOW,
            CYAN,
            RED,
            DARKGREEN,
            MAGENTA
        };

        
        unsigned num_of_features = getNumberOfFeatures();


        for(unsigned i = 0; i < num_of_features; i++){
            
            
        
            FeatureType temp_feature = getFeatureType(i);
            unsigned num_of_points = getFeaturePointCount(i);
            t_point list_of_points[num_of_points];
            
            for(unsigned a = 0; a < num_of_points; a++){

                list_of_points[a].x = getFeaturePoint(i, a).lon() * cos((lat_max + lat_min)/2) * DEG_TO_RAD;
                list_of_points[a].y = getFeaturePoint(i, a).lat() * DEG_TO_RAD;
            }
            
            if(temp_feature == 1){//Park
                
                setcolor( 175,  255,  130, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 2){//Beach
                setcolor( 240,  240,  150, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 3){//Lake
                setcolor( 50,  250,  250, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 4){//River
                
                setcolor( 50,  250,  250, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 5){//Island
                setcolor(250,250,245,255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 6){//Shoreline, deprecated, no longer used & should be removed
                
            }
            else if(temp_feature == 7){//Building
                setcolor(255,  237,  188, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 8){//Greenspace
                setcolor( 191,  255,  170, 255);
                fillpoly(list_of_points, num_of_points);
            }
            else if(temp_feature == 9){//Golfcourse
                setcolor( 127,  223,  30, 255);
                fillpoly(list_of_points, num_of_points);
                
            }
            else if(temp_feature == 10){//Stream
                setlinewidth(0.3);
                setcolor( 50,  250,  250, 255);
                for(unsigned ref = 0; ref < num_of_points - 1; ref++){
                    drawline(list_of_points[ref], list_of_points[ref+1]);
                }
                
            }
            else if(temp_feature == 0){//Unknown
                setcolor(color_indicies[1]);
                fillpoly(list_of_points, num_of_points);
            }
            
         }
  copy_off_screen_buffer_to_screen();
}


void delay(long milliseconds) {
    // if you would like to use this function in your
    // own code you will need to #include <chrono> and
    // <thread>
    std::chrono::milliseconds duration(milliseconds);
    std::this_thread::sleep_for(duration);
}


void act_on_new_button_func(void (*drawscreen_ptr) (void)) {
// Callback function for the new button we created. This function will be called
// when the user clicks on the button. It just counts how many
// times you have clicked the button.  

    char old_button_name[200], new_button_name[200];
    std::cout << "You pressed the new button!\n";
    setcolor(MAGENTA);
    setfontsize(12);
    drawtext(500, 500, "You pressed the new button!", 10000.0, FLT_MAX);
    sprintf(old_button_name, "%d Clicks", num_new_button_clicks);
    num_new_button_clicks++;
    sprintf(new_button_name, "%d Clicks", num_new_button_clicks);
    change_button_text(old_button_name, new_button_name);

    // Re-draw the screen (a few squares are changing colour with time)
    drawscreen_ptr();
}


void act_on_button_press(float x, float y, t_event_buttonPressed event) {

    /* Called whenever event_loop gets a button press in the graphics *
     * area.  Allows the user to do whatever he/she wants with button *
     * clicks.                                                        */

    std::cout << "User clicked a mouse button at coordinates ("
            << x << "," << y << ")";
    if (event.shift_pressed || event.ctrl_pressed) {
        std::cout << " with ";
        if (event.shift_pressed) {
            std::cout << "shift ";
            if (event.ctrl_pressed)
                std::cout << "and ";
        }
        if (event.ctrl_pressed)
            std::cout << "control ";
        std::cout << "pressed.";
    }
    std::cout << std::endl;

    if (line_entering_demo) {
        line_pts.push_back(t_point(x, y));
        have_rubber_line = false;

        // Redraw screen to show the new line.  Could do incrementally, but this is easier.
        drawscreen();
    }
}

void act_on_mouse_move(float x, float y) {
    // function to handle mouse move event, the current mouse position in the current world coordinate
    // system (as defined in your call to init_world) is returned

    std::cout << "Mouse move at " << x << "," << y << ")\n";
    if (line_pts.size() > 0) {
        // Rubber banding to a previously entered point.
        // Go into XOR mode.  Make sure we set the linestyle etc. for xor mode, since it is 
        // stored in different state than normal mode.
        set_draw_mode(DRAW_XOR);
        setlinestyle(SOLID);
        setcolor(WHITE);
        setlinewidth(1);
        int ipt = line_pts.size() - 1;

        if (have_rubber_line) {
            // Erase old line.  
            drawline(line_pts[ipt], rubber_pt);
        }
        have_rubber_line = true;
        rubber_pt.x = x;
        rubber_pt.y = y;
        drawline(line_pts[ipt], rubber_pt); // Draw new line
    }
}


#include <X11/keysym.h>

void act_on_key_press(char c, int keysym) {
    // function to handle keyboard press event, the ASCII character is returned
    // along with an extended code (keysym) on X11 to represent non-ASCII
    // characters like the arrow keys.

    std::cout << "Key press: char is " << c << std::endl;

#ifdef X11 // Extended keyboard codes only supported for X11 for now
    switch (keysym) {
        case XK_Left:
            std::cout << "Left Arrow" << std::endl;
            break;
        case XK_Right:
            std::cout << "Right Arrow" << std::endl;
            break;
        case XK_Up:
            std::cout << "Up Arrow" << std::endl;
            break;
        case XK_Down:
            std::cout << "Down Arrow" << std::endl;
            break;
        default:
            std::cout << "keysym (extended code) is " << keysym << std::endl;
            break;
    }
#endif
}

